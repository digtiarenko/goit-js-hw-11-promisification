{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger1","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"wJACMA,EAAQ,SAAAC,GAMZ,OALgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACTF,EAAQF,KACPA,OAKDK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAIjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAACC,EAASC,GAK3BD,EAJqBY,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAO7DC,EAAU,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAE9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAEnC,IAIMG,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCzB,GAL2BwB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACUqB,KAAKE,SAAW,GAGjCzB,EAAQ,CAACoB,EAAYM,GAAI7B,IAEzBI,EAAOmB,EAAYM,MAEpB7B,OAID8B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVtB,EAAU,KACjCC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAE/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,K","file":"main.e90a67d04fc80b3fab3e.js","sourcesContent":["// console.log('-*-*-*-*-*-*-*-*- Завдання 1 *-*-*-*-*-*-*-*-*-*');\r\nconst delay = ms => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger);\r\ndelay(1000).then(logger);\r\ndelay(1500).then(logger);\r\n\r\n// console.log('-*-*-*-*-*-*-*-*- Завдання 2 *-*-*-*-*-*-*-*-*-*');\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger1 = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger1);\r\ntoggleUserState(users, 'Lux').then(logger1);\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}